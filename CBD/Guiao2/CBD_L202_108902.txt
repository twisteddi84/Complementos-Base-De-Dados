// NMEC: 108902

//1. Liste todos os documentos da coleção.
db.restaurants.find({})

//2. Apresente os campos restaurant_id, nome, localidade e gastronomia para todos os documentos da coleção.
db.restaurants.find({}, { restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1})

//3. Apresente os campos restaurant_id, nome, localidade e código postal (zipcode), mas exclua o campo _id de todos os documentos da coleção.
db.restaurants.find({}, { restaurant_id: 1, nome: 1, localidade: 1, "address.zipcode": 1, _id: 0 })

//4. Indique o total de restaurantes localizados no Bronx.
db.restaurants.count({localidade:"Bronx"})
//309

//5. Apresente os primeiros 15 restaurantes localizados no Bronx, ordenados por ordem crescente de nome.
db.restaurants.find({ localidade: "Bronx" }).sort({ nome: 1 }).limit(15)

//6. Liste todos os restaurantes que tenham pelo menos um score superior a 85.
db.restaurants.find({grades:{$elemMatch:{score:{$gt:85}}}})

//7. Encontre os restaurantes que obtiveram uma ou mais pontuações (score) entre [80 e 100].
db.restaurants.find({grades: {$elemMatch: {score: {$gte: 80, $lte: 100}}}})

//8. Indique os restaurantes com latitude inferior a -95,7.
db.restaurants.find({"address.coord.0": {$lt: -95.7}})

//9. Indique os restaurantes que não têm gastronomia "American", tiveram uma (ou mais) pontuação superior a 70 e estão numa latitude inferior a -65.
db.restaurants.find({gastronomia: {$ne: "American"}, grades: {$elemMatch: {score: {$gt: 70}}}, "address.coord.0": {$lt: -65}})

//10. Liste o restaurant_id, o nome, a localidade e gastronomia dos restaurantes cujo nome começam por "Wil".
db.restaurants.find({nome: /^Wil/}, {restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1})

//11. Liste o nome, a localidade e a gastronomia dos restaurantes que pertencem ao Bronx e cuja gastronomia é do tipo "American" ou "Chinese".
db.restaurants.find({localidade: "Bronx", $or: [{gastronomia: "American"}, {gastronomia: "Chinese"}]}, {nome: 1, localidade: 1, gastronomia: 1,_id: 0})

//12. Liste o restaurant_id, o nome, a localidade e a gastronomia dos restaurantes localizados em "Staten Island", "Queens", ou "Brooklyn".
db.restaurants.find({localidade: {$in: ["Staten Island", "Queens", "Brooklyn"]}}, {restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1})

//13. Liste o nome, a localidade, o score e gastronomia dos restaurantes que alcançaram sempre pontuações inferiores ou igual a 3.
db.restaurants.find({"grades": {$not: {$elemMatch: {"score": { $gt: 3 }}}}}, {"nome": 1,"localidade": 1,"grades.score": 1,"gastronomia": 1 })

//14. Liste o nome e as avaliações dos restaurantes que obtiveram uma avaliação com um grade "A", um score 10 na data "2014-08-11T00: 00: 00Z" (ISODATE).
db.restaurants.find({"grades":{$elemMatch:{"grade": "A","score": 10,"date": ISODate("2014-08-11T00:00:00Z")}}},{"nome": 1,"grades": 1 })

//15.  Liste o restaurant_id, o nome e os score dos restaurantes nos quais a segunda avaliação foi grade "A" e ocorreu em ISODATE "2014-08-11T00: 00: 00Z".
db.restaurants.find({"grades.1.grade":"A","grades.1.date": ISODate("2014-08-11T00:00:00Z")}, {"restaurant_id": 1,"nome": 1,"grades.score": 1})

//16.Liste o restaurant_id, o nome, o endereço (address) e as coordenadas geográficas (coord) dos restaurantes onde o 2º elemento da matriz de coordenadas tem um valor superior a 42 e inferior ou igual a 52.
db.restaurants.find({"address.coord.1":{$gt: 42,$lte: 52} }, {"restaurant_id": 1,"nome": 1,"address": 1,"coord": 1 })

//17. Liste nome, gastronomia e localidade de todos os restaurantes ordenando por ordem crescente da gastronomia e, em segundo, por ordem decrescente de localidade.
db.restaurants.find({},{"nome": 1,"gastronomia": 1,"localidade": 1,"_id": 0}).sort({"gastronomia": 1,"localidade": -1 })

//18. Liste nome, localidade, grade e gastronomia de todos os restaurantes localizados em Brooklyn que não incluem gastronomia "American" e obtiveram uma classificação
(grade) "A". Deve apresentá-los por ordem decrescente de gastronomia.
db.restaurants.find({"localidade":"Brooklyn","gastronomia": {$ne: "American"},"grades.grade": "A"}, {"nome": 1,"localidade":1,"grades.grade": 1,"gastronomia": 1,"_id": 0}).sort({"gastronomia": -1})

//19. Indique o número total de avaliações (numGrades) na coleção. 
db.restaurants.aggregate([{$project: {numGrades: {$size: "$grades"}}},{$group:{_id: null,totalGrades:{$sum:"$numGrades"}}}])

//20. Apresente o nome e número de avaliações (numGrades) dos 3 restaurante com mais avaliações.
db.restaurants.aggregate([{$project:{nome: 1,numGrades: {$size: "$grades"}}},{$sort:{numGrades: -1}},{$limit: 3}])

//21. Apresente o número total de avaliações (numGrades) em cada dia da semana
db.restaurants.aggregate([{ $unwind: "$grades" },{ $addFields: { dayOfWeek: { $dayOfWeek: "$grades.date" } } },{ $group: { _id: "$dayOfWeek", numGrades: { $sum: 1 } } },{ $sort: { _id: 1 } }])

//22. Conte o total de restaurante existentes em cada localidade
db.restaurants.aggregate([{$group:{_id: "$localidade", total: {$sum: 1}}}])

//23. Indique os restaurantes que têm gastronomia "Portuguese", o somatório de score é superior a 50 e estão numa latitude inferior a -60.
db.restaurants.aggregate([{$match: {gastronomia: "Portuguese"}},{$addFields: {totalScore: {$sum: "$grades.score"}}},{$match: {totalScore: {$gt: 50}}},{$match: {"address.coord.0": {$lt: -60}}}])

//24. Apresente o número de gastronomias diferentes na rua "Fifth Avenue"
db.restaurants.aggregate([{$match: {"address.rua": "Fifth Avenue"}},{$group: {_id: "$gastronomia"}}])

//25. Apresente o nome e o score médio (avgScore) e número de avaliações (numGrades) dos restaurantes com score médio superior a 30 desde 1-Jan-2014.
db.restaurants.aggregate([{$match: {"grades.date": {$gte: ISODate("2014-01-01T00:00:00Z")}}},{$addFields: {avgScore: {$avg: "$grades.score"},numGrades: {$size: "$grades"}}},{$match: {avgScore: {$gt: 30}}},{$project: {nome: 1,avgScore: 1,numGrades: 1}}])

//26. Apresente os restaurantes que têm uma avaliação (grade) com o maior score.
db.restaurants.aggregate([{$unwind: "$grades"},{$sort: {"grades.score": -1}},{$limit: 1},{$project: {_id: 0,nome: 1,maxScore: "$grades.score"}}])

//27. Apresente o restaurante com o maior número de avaliações (grades) "A".
db.restaurants.aggregate([{ $unwind: "$grades" },{ $match: { "grades.grade": "A" } },{ $group: { _id: "$_id", nome: { $first: "$nome" }, numAvaliacoesA: { $sum: 1 } } },{ $sort: { numAvaliacoesA: -1 } },{ $limit: 1 },{ $project: { _id: 0, nome: 1, numAvaliacoesA: 1 } }])

//28. Apresente o numero de restaurantes existentes em cada rua e apresente o resultado por ordem decrescente do total.
db.restaurants.aggregate([{$group: {_id: "$address.rua", total: {$sum: 1}}},{$sort: {total: -1}}])

//29. Apresente a média de scores para restaurantes de cada tipo de gastronomia e coloque por ordem decrescente.
db.restaurants.aggregate([{$unwind: "$grades"},{$group: {_id: "$gastronomia", avgScore: {$avg: "$grades.score"}}},{$sort: {avgScore: -1}}])

//30. Quais são os restaurantes que têm uma avaliação "C" com a pontuação mais alta?
db.restaurants.aggregate([{$unwind: "$grades"},{$match: {"grades.grade": "C"}},{$sort: {"grades.score": -1}},{$limit: 1},{$project: {_id: 0,nome: 1,grade: "$grades.grade",score: "$grades.score"}}])
